import './index.ess'  

:doc
  @name App

:module
  export function onGenerate() {
    var nums = {};
    while (Object.keys(nums).length < 4) {
      var num = Math.round(Math.max(1, Math.random() * 10)).toString();
      if (!nums[num]) nums[num] = true;
    }
    nums = Object.keys(nums);
    this.setState({nums: nums, numsStatus: {}, res: 0});
  }
  
  export function onChange(ev) {
    var val = ev.target.value;
    var nums = this.state.nums.slice();
    var numsArr = val.replace(/[\+\*\-\//\(\)\s]/g, ',').split(',')
    var numsStatus = numsArr.reduce((acc, next, idx) => {
      for (var i = 0; i < nums.length; i++) {
        if (next !== nums[i]) continue;
        acc[acc[i] ? idx : i] = true;
        nums.splice(i, 1, null);
        break;
      }
      return acc;
    }, {});
    var state = {numsStatus};
    var res;
    try { res = eval(val) } catch(e) { res = '-' }
    if (res) state.res = res;
    var isUsingAllNums = Object.keys(numsStatus).length === numsArr.length === 4;
    state.isCorrect = isUsingAllNums && res.toString() === '24';
    this.setState(state);
  }
  
  export function componentDidMount() {
    this.onGenerate();
  }

header.App-header
  h1.App-header-heading math24
  button.App-header-generate(onClick=this.onGenerate) generate

input.App-input(onChange=this.onChange autoFocus placeholder='Combine the numbers below to make 24')

.App-nums
  each n, i in state.nums
    var isActive = state.numsStatus[i]
    var className = isActive ? 'is-active' : ''
    .App-nums-num(className=className)= n

var res = state.numsStatus && Object.keys(state.numsStatus).length && state.res || '-'
var className = state.isCorrect ? 'is-active' : ''
.App-result(className=className)= res